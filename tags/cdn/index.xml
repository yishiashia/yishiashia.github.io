<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>CDN on yishiashia's Blog</title><link>https://yishiashia.github.io/tags/cdn/</link><description>Recent content in CDN on yishiashia's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><copyright>Copyright © 2023 yishiashia@gmail.com. All rights reserved.</copyright><lastBuildDate>Thu, 21 Dec 2023 14:00:11 +0800</lastBuildDate><atom:link href="https://yishiashia.github.io/tags/cdn/index.xml" rel="self" type="application/rss+xml"/><item><title>Web Components 介紹與實作說明 (3) | 模組化開源與 CDN</title><link>https://yishiashia.github.io/posts/webcomponent-introduction-3/</link><pubDate>Thu, 21 Dec 2023 14:00:11 +0800</pubDate><guid>https://yishiashia.github.io/posts/webcomponent-introduction-3/</guid><description>前情 先前我們介紹了如何實作一個 Tooltips 的 WebComponenet 元件， 今天我們來說明如何將我們辛苦寫好的 UI 元件模組化並上傳到 NPM 套件庫， 方便之後可以重複使用。
模組化 在先前 CodePen 的範例中， 其實我們就使用了 立即調用函式 IIFE (Immediately Invoked Function Expression) 的方式來宣告我們的 Custom Element。
使用 IIFE 來執行模組化除了可以在網頁載入時執行我們定義的函式外，也可以透過局部作用域的創建來避免變數汙染與命名衝突等問題， 是前端模組化常常使用的模式，他的基本語法如下:
1 2 3 (function () { // 要執行的程式碼 })(); 而宣告與定義一個 WebComponent 主要是使用 window.customElements.define 來宣告我們自定義的 HTML 標籤，所以語法會像下面這樣:
1 2 3 4 5 6 7 8 9 // my-tag.js (function () { window.customElements.define( &amp;#34;my-tag&amp;#34;, class extends HTMLElement { // 定義 Custom Element 參數、行為等 } ); })(); 完成上述的 IIFE 的程式碼後，我們可以將這段程式碼儲存在一個自訂的檔案，如: my-tag.</description></item></channel></rss>